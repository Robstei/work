#global variables
array<int> array_current_block[0];

sub pause (int time_in_seconds)
begin
	loop int start_time = clock.time()
	until clock.time() > start_time + time_in_seconds * 1000
	begin
		text_pause.set_caption("In " + string(time_in_seconds - floor((clock.time() - start_time) / 1000)) + " Sekunden geht es weiter", true);
		trial_pause.present();
	end;
	#trial_pause_button.present();
end;

sub change_stimulus (int stimulus)
begin
	if (stimulus == 1)
	then
		picture_stimuli.set_filename("stimulus_neutral.jpg");
	elseif (stimulus == 2)
	then
		picture_stimuli.set_filename("stimulus_sns.jpg");
	end;
	picture_stimuli.load();
end;

sub string add_target_filename_to_code(string code, int target_stimulus)
begin
	string new_code = code;
	
	if (target_stimulus == 1)
	then
		new_code = new_code + ";" + "stimulus_neutral.jpg";
	elseif (target_stimulus == 2)
	then
		new_code = new_code + ";" + "stimulus_sns.jpg";
	end;
	return new_code;
end;

sub string add_non_target_filename_to_code(string code, int non_target_stimulus)
begin
	string new_code = code;
	
	if (non_target_stimulus == 1)
	then
		new_code = new_code + ";" + "stimulus_neutral.jpg";
	elseif (non_target_stimulus == 2)
	then
		new_code = new_code + ";" + "stimulus_sns.jpg";
	end;
	return new_code;
end;


sub bool validate (array<int,1> block_to_test, string mode)
begin
	#first stimuli is not allowed to be a target in attention mode 
	if (mode == "attention" && block_to_test[1] == 1)
	then
		return false;
	#first stimuli is not allowed to be a non target in inhibition mode
	elseif (mode == "inhibition" && block_to_test[1] == 0)
	then
		return false;
	end;
	
	#successive stimuli are not allowed to be targets in attention mode 
	if (mode == "attention")
	then
		loop int i = 1 until i == block_to_test.count() - 1
		begin
			if (block_to_test[i] == 1 && block_to_test[i+1] == 1)
			then
				return false;
			end;
			i = i + 1;
		end;
	#successive stimuli are not allowed to be non targets in inhibition mode
	elseif(mode == "inhibition")
	then
		loop int i = 1 until i == block_to_test.count() - 1
		begin
			if (block_to_test[i] == 0 && block_to_test[i+1] == 0)
			then
				return false;
			end;
			i = i + 1;
		end;
	end;

	return true;
end;

sub present_block_instruction (int target_stimulus, int non_target_stimulus)
begin
	if (target_stimulus == 1 && non_target_stimulus == 2)
	then
		picture_instruction_block.set_filename("instruction1.jpg");
	elseif (target_stimulus == 2 && non_target_stimulus == 1)
	then
		picture_instruction_block.set_filename("instruction2.jpg");
	end;
	picture_instruction_block.load();
	trial_instruction_block.present();
end;

#creates an array where 1s are target and 0s are non targets
sub create_block (int targets, int non_targets, string mode)
begin
	array_current_block.resize(0);
	loop int i = 1 until i > targets
	begin
		array_current_block.add(1);
		i = i + 1;
	end;

	loop int i = 1 until i > non_targets
	begin
		array_current_block.add(0);
		i = i + 1;
	end;
	
		array_current_block.shuffle();
	loop until validate(array_current_block, mode)
	begin
		array_current_block.shuffle();
	end;
end;

sub present_block (int target_stimulus, int non_target_stimulus, string block, string block_type, bool show_instruction)
begin
	if(show_instruction)
	then
		present_block_instruction(target_stimulus, non_target_stimulus);
	end;
	
	loop int i = 1 until i >  array_current_block.count()
	begin
		string code = block + ";" + string(i) + ";" + block_type;
		
		trial_cross.set_duration(random(500,1000));
		trial_cross.present();
		
		se_stimuli.set_target_button(0);
		
		if  array_current_block[i] == 1
		then
			change_stimulus(target_stimulus);
			se_stimuli.set_target_button(1);
			code = code + ";" + string(target_stimulus) + ";" + "target";
		else
			change_stimulus(non_target_stimulus);
			se_stimuli.set_response_active(true);
			code = code + ";" + string(non_target_stimulus) + ";" + "non_target";
		end;
		
		code = add_target_filename_to_code(code, target_stimulus);
		code = add_non_target_filename_to_code(code, non_target_stimulus);
		
		se_stimuli.set_event_code(code);
		trial_stimuli.present();
		i = i + 1;
	end;
end;

include "execution.pcl";
include "data.pcl";