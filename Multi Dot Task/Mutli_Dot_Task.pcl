array<int> array_current_block_positions[0][0][0];
array<int> array_current_block_target[0];

bool fmri_running = false;
int fmrt_start_time;
int offset_from_border = parameter_manager.get_int("Distance from Screen Border",150);
int non_targets_in_stimulus = parameter_manager.get_int("Non Targets in Stimulus",6);
int circle_diameter = parameter_manager.get_int("Circle Diameter", 100);
int circle_buffer = parameter_manager.get_int("Circle Buffer", 20);
int min_x_coordinate;
int max_x_coordinate;
int min_y_coordinate;
int max_y_coordinate;

# presentation has (0/0) in the middle of the screen,
# hence the the boundaries for a screen with width x presentetiona are min = -(x/2) and max x/2
# same for height. Note that x goes from left to right, but y goes from bottom to top. 
# Border to not have the circles touch the border
sub calculate_screen_boundaries
begin
	int display_width = int(display_device.width());
	int display_height = int(display_device.height());
	min_x_coordinate = -(display_width / 2) + offset_from_border;
	max_x_coordinate = (display_width / 2) - offset_from_border;
	min_y_coordinate = -(display_height / 2) + offset_from_border;
	max_y_coordinate = (display_height / 2) - offset_from_border;

end;


sub pause (int time_in_seconds)
begin
	loop int start_time = clock.time()
	until clock.time() > start_time + time_in_seconds * 1000
	begin
		text_pause.set_caption("In " + string(time_in_seconds - floor((clock.time() - start_time) / 1000)) + " Sekunden geht es weiter", true);
		trial_pause.present();
	end;
	trial_pause_button.present();
	term.print_line("Versuchsleiter muss Pause beenden");
end;

sub wait_pulses (trial trial_to_set, int pulses)
begin
	int current_pulse = pulse_manager.main_pulse_count();
	trial_to_set.set_mri_pulse(current_pulse + pulses + 1);
end;

sub bool validate(string validation_mode)
begin
	#first stimuli is not supposed to be a target if the block tests attention
	if(validation_mode == "attention" && array_current_block_target[1] == 1)
	then
		return false;
	#first stimuli is not supposed to be a non_target if the block tests inhibtion
	elseif(validation_mode == "inhibition" && array_current_block_target[1] == 0)
	then
		return false;
	end;
	return true;
end;


sub string color_to_string (int color)
begin
	#red
	if (color == 1)
	then
		return + "roten";
	#yellow
	elseif (color == 2)
	then
		return + "gelben";
	#violet
	elseif (color == 3)
	then
		return + "violetten";
	#green
	elseif (color == 4)
	then
		return + "gr√ºnen";
	#orange
	elseif (color == 5)
	then
		return + "orangenen";
	#blue
	elseif (color == 6)
	then
		return + "blauen";
	end;
	return "";
end;

sub change_color (ellipse_graphic eg, int color)
begin
	#red
	if (color == 1)
	then
		eg.set_color(255, 0, 0, 255);
	#yellow
	elseif (color == 2)
	then
		eg.set_color(255, 255, 0, 255);
	#violet
	elseif (color == 3)
	then
		eg.set_color(180, 30, 180, 255);
	#green
	elseif (color == 4)
	then
		eg.set_color(40, 200, 40, 255);
	#orange
	elseif (color == 5)
	then
		eg.set_color(255, 140, 0, 255);
	#blue
	elseif (color == 6)
	then
		eg.set_color(60, 170, 220, 255);
	end;
	eg.redraw();
end;

sub present_block_instruction (int target_color, int non_target_color)
begin
	string string_instruction = "Ihre Aufgabe:\n\nBitte reagieren Sie mit dem Zeigefinger, wenn Sie einen ";
	
	string_instruction = string_instruction + color_to_string(target_color);
	
	string_instruction = string_instruction + " Kreis sehen.";
		
	string_instruction = string_instruction + "\n\nStarten Sie die Aufgabe durch einen Druck mit dem Zeigefinger.";
	
	text_instruction_block.set_caption(string_instruction);
	text_instruction_block.redraw();
	trial_instruction_block.present();
end;

# returns true if distance between points is big enough for them to not overplap
sub bool valid_points (int x_first_point, int y_first_point, int x_second_point, int y_second_point)
begin
	if (abs(x_first_point - x_second_point) < (circle_buffer + circle_diameter) && abs(y_first_point - y_second_point) < (circle_buffer + circle_diameter))
	then
		return false;
	end;
	return true;
end;

sub create_block (string mode, int targets, int non_targets, string validation_mode)
begin	
	array_current_block_target.resize(0);
	loop int i = 1 
	until i > targets
	begin
		array_current_block_target.add(1);
		i = i + 1;
	end;
	
	loop int i = 1 
	until i > non_targets
	begin
		array_current_block_target.add(0);
		i = i + 1;
	end;
	
	array_current_block_target.shuffle();
	loop until validate(validation_mode)
	begin
		array_current_block_target.shuffle();
	end;
	
	
	#reset array
	array_current_block_positions.resize(0);
	array_current_block_positions.resize(array_current_block_target.count());
	loop int i = 1 until i > array_current_block_positions.count()
	begin
		array_current_block_positions[i].resize(1 + non_targets_in_stimulus);
		loop int j = 1 until j > array_current_block_positions[i].count()
		begin
			array_current_block_positions[i][j].resize(2);
			j = j + 1;
		end;
		i = i + 1;
	end;
	

	#if stimulus has a target it will always be the first stimulus part.
	#if a stimulus in a non target the target circle will still be set here but just not presented by present_block()
	
	#only non target circles change posiition
	if (mode == "different_non_targets")
	then
		loop int stimuli = 1 until stimuli > array_current_block_target.count()
		begin
			
			# set target value of stimuli	
			array_current_block_positions[stimuli][1][1] = 0;
			array_current_block_positions[stimuli][1][2] = 0;	
			
			# set the non_targets
			loop int circle_count = 1 until circle_count > non_targets_in_stimulus
			begin
				int potential_x = random(min_x_coordinate, max_x_coordinate);
				int potential_y = random(min_y_coordinate, max_y_coordinate);
				bool valid_point = true;
				loop int circle_to_compare_index = 1 until circle_to_compare_index > circle_count
				begin
					if (!(valid_points(potential_x, potential_y,
						array_current_block_positions[stimuli][circle_to_compare_index][1],
						array_current_block_positions[stimuli][circle_to_compare_index][2])))
					then
						valid_point = false;
						break;
					end;
					circle_to_compare_index = circle_to_compare_index + 1;
				end;
				if (valid_point)
				then
					array_current_block_positions[stimuli][circle_count + 1][1] = potential_x;
					array_current_block_positions[stimuli][circle_count + 1][2] = potential_y;
					circle_count = circle_count + 1;
				end;
			end;
			stimuli = stimuli + 1;
		end;
	elseif (mode == "different_targets")
	then
		loop int circle_count = 1 until circle_count > non_targets_in_stimulus
		begin
			int potential_x = random(min_x_coordinate, max_x_coordinate);
			int potential_y = random(min_y_coordinate, max_y_coordinate);
			bool valid_point = true;
			loop int circle_to_compare_index = 2 until circle_to_compare_index > circle_count
			begin
				if (!(valid_points(potential_x, potential_y,
					array_current_block_positions[1][circle_to_compare_index][1],
					array_current_block_positions[1][circle_to_compare_index][2])))
				then
					valid_point = false;
					break;
				end;
				circle_to_compare_index = circle_to_compare_index + 1;
			end;
			if (valid_point)
			then
				array_current_block_positions[1][circle_count + 1][1] = potential_x;
				array_current_block_positions[1][circle_count + 1][2] = potential_y;
				circle_count = circle_count + 1;
			end;
		end;
		
		#copy the non targets in the all the stimuli
		loop int stimuli = 2 until stimuli > array_current_block_target.count()
		begin
			loop int non_target_circle = 1 until non_target_circle > non_targets_in_stimulus
			begin
				array_current_block_positions[stimuli][non_target_circle + 1][1] = array_current_block_positions[1][non_target_circle + 1][1];
				array_current_block_positions[stimuli][non_target_circle + 1][2] = array_current_block_positions[1][non_target_circle + 1][2];
				non_target_circle = non_target_circle + 1;
			end;
			stimuli = stimuli + 1;
		end;
		
		loop int stimuli = 1 until stimuli > array_current_block_target.count()
		begin
			# set target value of stimuli
			int tmp_x = random(min_x_coordinate, max_x_coordinate);
			int tmp_y = random(min_y_coordinate, max_y_coordinate);			
			
			bool valid_target;
			loop int circle_to_compare_index = 1 until circle_to_compare_index > non_targets_in_stimulus
			begin
				valid_target = true;
				if (!(valid_points(tmp_x, tmp_y,
					array_current_block_positions[stimuli][circle_to_compare_index + 1][1],
					array_current_block_positions[stimuli][circle_to_compare_index + 1][2])))
				then
					valid_target = false;
					break;
				end;
				circle_to_compare_index = circle_to_compare_index + 1;
			end;
			
			if (valid_target)
			then
				array_current_block_positions[stimuli][1][1] = tmp_x;
				array_current_block_positions[stimuli][1][2] = tmp_y;
				stimuli = stimuli + 1;
			end;
		end;
	elseif (mode == "different_both")
	then
		loop int stimuli = 1 until stimuli > array_current_block_target.count()
		begin
			# set target value of stimuli
			int tmp_x = random(min_x_coordinate, max_x_coordinate);
			int tmp_y = random(min_y_coordinate, max_y_coordinate);			
			array_current_block_positions[stimuli][1][1] = tmp_x;
			array_current_block_positions[stimuli][1][2] = tmp_y;	
			
			# set the non_targets
			loop int circle_count = 1 until circle_count > non_targets_in_stimulus
			begin
				int potential_x = random(min_x_coordinate, max_x_coordinate);
				int potential_y = random(min_y_coordinate, max_y_coordinate);
				bool valid_point = true;
				loop int circle_to_compare_index = 1 until circle_to_compare_index > circle_count
				begin
					if (!(valid_points(potential_x, potential_y,
						array_current_block_positions[stimuli][circle_to_compare_index][1],
						array_current_block_positions[stimuli][circle_to_compare_index][2])))
					then
						valid_point = false;
						break;
					end;
					circle_to_compare_index = circle_to_compare_index + 1;
				end;
				if (valid_point)
				then
					array_current_block_positions[stimuli][circle_count + 1][1] = potential_x;
					array_current_block_positions[stimuli][circle_count + 1][2] = potential_y;
					circle_count = circle_count + 1;
				end;
			end;
			stimuli = stimuli + 1;
		end;
	end;
end;

sub present_block (string code, int target_color, int non_target_color, bool show_instruction, int pulses_to_wait)
begin
	if(show_instruction)
	then
	present_block_instruction(target_color, non_target_color);
	end;

	loop int current_stimulus = 1 until current_stimulus > array_current_block_target.count()
	begin
		if (pulses_to_wait > 0 && current_stimulus == 1)
		then
			wait_pulses(trial_cross, pulses_to_wait);
			term.print_line("Synchronisation mit " + string(pulses_to_wait) + " Pulsen");
			trial_sync.present();
		end;
		
		trial_cross.set_duration(random(500,100));
		trial_cross.present();
		
		if (!fmri_running)
		then
		fmrt_start_time = stimulus_manager.last_stimulus_data().time();
		fmri_running = true;
		end;
	
		picture picture_main = new picture();
		trial current_trial = new trial();
		string event_code = code + ";" + string(current_stimulus) + ";" + string(target_color) + ";" + string(non_target_color);
		
		loop int cirlces_per_stimulus = 1 until cirlces_per_stimulus > non_targets_in_stimulus + 1
		begin
			#continue if non_target
			if (cirlces_per_stimulus == 1 && array_current_block_target[current_stimulus] == 0)
			then
				cirlces_per_stimulus = cirlces_per_stimulus + 1;
				continue;
			end;
			
			ellipse_graphic tmp_eg = new ellipse_graphic();
			if (cirlces_per_stimulus == 1)
			then
				change_color(tmp_eg, target_color);
			else
				change_color(tmp_eg, non_target_color);
			end;
			tmp_eg.set_dimensions(circle_diameter,circle_diameter);
			tmp_eg.set_size(circle_diameter,circle_diameter);
			tmp_eg.redraw();
			picture_main.add_part(tmp_eg, 
						array_current_block_positions[current_stimulus][cirlces_per_stimulus][1],
						array_current_block_positions[current_stimulus][cirlces_per_stimulus][2]);
			
			cirlces_per_stimulus = cirlces_per_stimulus + 1;
		end;
		
		current_trial.add_stimulus_event(picture_main);
		current_trial.get_stimulus_event(1).set_target_button(0);
		
		if(array_current_block_target[current_stimulus] == 1)
		then
			event_code = event_code + ";" + "target";
			current_trial.get_stimulus_event(1).set_target_button(0);
		else
			event_code = event_code + ";" + "non_target";
			current_trial.get_stimulus_event(1).set_response_active(true);
		end;
		
		current_trial.get_stimulus_event(1).set_duration(200);
		current_trial.get_stimulus_event(1).set_event_code(event_code);
		current_trial.set_duration(2000);
		current_trial.set_type(trial::FIXED);
		current_trial.present();
		current_stimulus = current_stimulus + 1;
	end;
end;

include "execution.pcl"
include "data.pcl"