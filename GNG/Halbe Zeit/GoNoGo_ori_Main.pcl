/*
* GoNoGo Main-PCL File
*
* This pcl-file controls all processes during the whole experiment. To better understand the code
* it is recommended to read the experiment-description in the project directory.
* 
* The whole project is designed to be as dynamic as possible. For that reason all processes are modularized
* into different subs (functions), whereas each sub is responsible for one logic task. Also all variables used
* in this project are defined in VARIABLES-sections. Before any other changes are made it is recommended
* to check if it's possible to individualize the project by changing these values.
* The SUBS-sections define general tasks at the beginning whereas the whole project control can be found at the 
* bottom of the file. Note that different combinations of subs in the completeProcedure-sub can be used to
* individualize the project by adding, removing or changing single execution tasks.
*
* Additionally most of the tasks are outsourced in different pcl-files, which you can see in the INCLUDE-section 
* of this file. You will find there basic informations of purposes and subs of all used pcl-files.
*
* Data collection and output is also organized in a dynamic manner. All possible data gets collected during the 
* experiment using arrays (see exportData.pcl). At the end of the experiment the exportData-sub creates an output
* file, while the specific output can be individualized by the user, while working with the raw-data arrays.
*
* If changes on this experiment are done it is highly recommended to keep the modularized structure of the whole
* project due to organizational purposes.
*
* Version:		Presentation 16.5
*
* Author: 		Jan Snagowski 09/2014
* Institute: 	University of Duisburg-Essen
* Department: 	General Psychology: Cognition
*/

#--  PREFERENCES  --#		
	#options
	int blocksInTotal = 4;
	int stimuliPerBlock = 20;
	int trialCount = blocksInTotal * stimuliPerBlock;	
	bool exportVariableNames = true;
#-- /PREFERENCES  --#


#--  DATA  --#
	#NOTE: all data collected by the program gets stored in different arrays, which are defined here
	#When the whole procedure is finished, an output file will be produced

	#participant number
	string vpCode = "";
	int experimentGroup = 0;
	string mode = "default";
	
	array<int> blockConditions[4];

	array <int> itiArray[stimuliPerBlock];
	array <int> fixArray[stimuliPerBlock];
	array <int> block1Order[stimuliPerBlock];
	array <int> block2Order[stimuliPerBlock];
	array <int> block3Order[stimuliPerBlock];
	array <int> block4Order[stimuliPerBlock];
	#1=stimulus,2=position,3=rt,4=answerGiven,5=answerCorrect,6=goTrial
	array <int> rawData[blocksInTotal][stimuliPerBlock][6];
	array <int> correctedData[blocksInTotal][stimuliPerBlock][6];
	
	#buffer for storing data
	int stim1count = 0;
	int stim2count = 0;
	int stim3count = 0;
	int stim4count = 0;
	array<int> stim1[5][6];
	array<int> stim2[5][6];
	array<int> stim3[5][6];
	array<int> stim4[5][6];
	
#--  /DATA  --#



#--  INCLUDE STATEMENTS  --#
	#holds all available raw data and is responsible for writing the data output
	include "dataHandling_ori.pcl";
#-- /INCLUDE STATEMENTS  --#


#--  SUBROUTINES  --#	

	#--  RANDOMIZE TIMING  --#
		sub randomizeTiming
		begin
			
			int value1 = 1000;
			int value2 = 1500;
			int value3 = 2000;
			int value4 = 2500;
			
			itiArray[1] = value1;
			itiArray[2] = value1;
			itiArray[3] = value1;
			itiArray[4] = value1;
			itiArray[5] = value1;			
			itiArray[6] = value2;
			itiArray[7] = value2;
			itiArray[8] = value2;
			itiArray[9] = value2;
			itiArray[10] = value2;			
			itiArray[11] = value3;
			itiArray[12] = value3;
			itiArray[13] = value3;
			itiArray[14] = value3;
			itiArray[15] = value3;			
			itiArray[16] = value4;
			itiArray[17] = value4;
			itiArray[18] = value4;
			itiArray[19] = value4;
			itiArray[20] = value4;			
			
			value1 = 750;
			value2 = 1000;
			value3 = 1250;
			value4 = 1500;
			
			fixArray[1] = value1;
			fixArray[2] = value1;
			fixArray[3] = value1;
			fixArray[4] = value1;
			fixArray[5] = value1;			
			fixArray[6] = value2;
			fixArray[7] = value2;
			fixArray[8] = value2;
			fixArray[9] = value2;
			fixArray[10] = value2;			
			fixArray[11] = value3;
			fixArray[12] = value3;
			fixArray[13] = value3;
			fixArray[14] = value3;
			fixArray[15] = value3;			
			fixArray[16] = value4;
			fixArray[17] = value4;
			fixArray[18] = value4;
			fixArray[19] = value4;
			fixArray[20] = value4;			
			
			itiArray.shuffle();
			fixArray.shuffle();
		end;	
	#-- /RANDOMIZE TIMING  --#


	#--  STIMULI RANDOMIZATION  --#
		sub stimuliRandomization
		begin						
			array<int> order1[20] = {1,2,3,1,4,2,3,4,1,3,2,1,4,3,2,4,1,2,4,3};
			array<int> order2[20] = {1,2,3,2,4,1,4,3,1,4,2,3,4,2,3,1,2,3,4,1};
			array<int> order3[20] = {2,1,4,3,1,2,4,3,2,1,3,4,2,1,3,2,1,4,3,4};
			array<int> order4[20] = {4,1,2,3,1,2,4,3,4,2,3,1,2,4,3,1,4,3,2,1};
			
			#shuffle arrays
			array<int> setOrder[4] = {1,2,3,4};
			setOrder.shuffle();		
			
			loop 
				int i = 1 
			until
				i > setOrder.count()
			begin
				array<int> bufferArray[20];
				if setOrder[i] == 1 then
					bufferArray = order1;
				elseif setOrder[i] == 2 then
					bufferArray = order2;
				elseif setOrder[i] == 3 then
					bufferArray = order3;
				elseif setOrder[i] == 4 then
					bufferArray = order4;
				end;
				
				if i == 1 then
					block1Order = bufferArray;
				elseif i == 2 then
					block2Order = bufferArray;
				elseif i == 3 then
					block3Order = bufferArray;
				elseif i == 4 then
					block4Order = bufferArray;
				end;
				
				i = i + 1;
			end;
		end;
	#--  STIMULI RANDOMIZATION  --# 
	
	
	#--  RESET DATA BUFFER  --#
		sub resetDataBuffer
		begin
			stim1count = 0;
			stim2count = 0;
			stim3count = 0;
			stim4count = 0;
			
			loop
				int i = 1
			until
				i > 5
			begin
				loop
					int j = 1
				until
					j > 6
				begin
					stim1[i][j] = 0;
					stim2[i][j] = 0;
					stim3[i][j] = 0;
					stim4[i][j] = 0;
					j = j + 1;
				end;				
				i = i + 1;
			end;
		end;	
	#-- /RESET DATA BUFFER  --#
	

	#--  	EXECUTE TRIAL  --#
		sub executeTrial(int i, int block, int condition, int actualStimulus, int actualfix, int actualiti)
		begin
			
			fixationCross.set_duration(actualfix);		
			iti.set_duration(actualiti);

			#determine if participant should press button
			int goTrial = 0;
			if condition == 1 then
				if actualStimulus == 1 || actualStimulus == 2 then
					goTrial = 1;
				end;
			else
				if actualStimulus == 3 || actualStimulus == 4 then
					goTrial = 1;
				end;
			end;
			
			fixationCross.present();
			if actualStimulus == 1 then
				playSound1.present();
				stim1count = stim1count + 1;
			elseif actualStimulus == 2 then
				playSound2.present();
				stim2count = stim2count + 1;
			elseif actualStimulus == 3 then
				playSound3.present();
				stim3count = stim3count + 1;
			elseif actualStimulus == 4 then
				playSound4.present();
				stim4count = stim4count + 1;
			end;
			
			#get data
			stimulus_data last = stimulus_manager.last_stimulus_data();			
			int correct = 0;
			int last_rt = 0;
			last_rt = last.reaction_time();			
			if last_rt == 0 && goTrial == 0 then
				correct = 1;
			elseif last_rt != 0 && goTrial == 1 then
				correct = 1;
			end;
			
			int answerGiven = 0;
			if last_rt != 0 then
				answerGiven = 1;
			end;
			
			if correct == 1 then
				positiveFeedback.present();
			else
				negativeFeedback.present();
			end;			
			
			#store data
			if mode == "execution" then
				#code data
				#1=stimulus,2=position,3=rt,4=answerGiven,5=answerCorrect,6=goTrial				
				if actualStimulus == 1 then
					stim1[stim1count][1] = 1;
					stim1[stim1count][2] = i;
					stim1[stim1count][3] = last_rt;
					stim1[stim1count][4] = answerGiven;
					stim1[stim1count][5] = correct;
					stim1[stim1count][6] = goTrial;
				elseif actualStimulus == 2 then
					stim2[stim2count][1] = 2;
					stim2[stim2count][2] = i;
					stim2[stim2count][3] = last_rt;
					stim2[stim2count][4] = answerGiven;
					stim2[stim2count][5] = correct;
					stim2[stim2count][6] = goTrial;
				elseif actualStimulus == 3 then
					stim3[stim3count][1] = 3;
					stim3[stim3count][2] = i;
					stim3[stim3count][3] = last_rt;
					stim3[stim3count][4] = answerGiven;
					stim3[stim3count][5] = correct;
					stim3[stim3count][6] = goTrial;
				elseif actualStimulus == 4 then
					stim4[stim4count][1] = 4;
					stim4[stim4count][2] = i;
					stim4[stim4count][3] = last_rt;
					stim4[stim4count][4] = answerGiven;
					stim4[stim4count][5] = correct;
					stim4[stim4count][6] = goTrial;
				end;					
			end;
			iti.present();			
		end;
	#-- /EXECUTE TRIAL  --#
	
	#--  RUN INSTRUCTION  --#
		sub runInstruction
		begin
			#general instruction
			targetPicture.set_part(1,instructions[1]);
			showPicture.present();
			#listen to sound 1
			targetPicture.set_part(1,instructions[2]);
			showPicture.present();
			inPlay1.present();
			showPicture.present();
			#listen to sound 2
			targetPicture.set_part(1,instructions[3]);
			showPicture.present();
			inPlay2.present();
			showPicture.present();
			#listen to sound 3
			targetPicture.set_part(1,instructions[4]);
			showPicture.present();
			inPlay3.present();
			showPicture.present();
			#listen to sound 4
			targetPicture.set_part(1,instructions[5]);
			showPicture.present();
			inPlay4.present();
			showPicture.present();			
			#practice instruction
			targetPicture.set_part(1,instructions[6]);
			showPicture.present();
			#practice round 1
			targetPicture.set_part(1,instructions[7]);
			showPicture.present();
			p_1_2.set_part(1,instructions[7]);
			play1And2.present();
			showPicture.present();
			targetPicture.set_part(1,instructions[8]);
			showPicture.present();
			p_3_4.set_part(1,instructions[8]);
			play3And4.present();		
			showPicture.present();			
			#run round
			array<int> round1[10];
			round1 = {1,4,3,1,2,4,3,2,3,4};
			loop
				int i = 1 
			until
				i > round1.count()
			begin
				executeTrial(0,0,1,round1[i],random(750,1500),random(1000,2500));				
				i = i + 1;
			end;					
			#practice round 2
			targetPicture.set_part(1,instructions[9]);
			showPicture.present();
			p_3_4.set_part(1,instructions[9]);
			play3And4.present();	
			showPicture.present();
			targetPicture.set_part(1,instructions[10]);
			showPicture.present();
			p_1_2.set_part(1,instructions[10]);			
			play1And2.present();
			showPicture.present();			
			#run round
			array<int> round2[10];
			round2 = {3,2,4,1,3,2,1,4,3,4};
			loop
				int i = 1 
			until
				i > round2.count()
			begin
				executeTrial(0,0,2,round2[i],random(750,1500),random(1000,2500));				
				i = i + 1;
			end;				
			#instruction ended
			targetPicture.set_part(1,instructions[11]);
			showPicture.present();		
		end;
	#-- /RUN INSTRUCTION  --#	
	
	#--  RUN BLOCK  --#
		sub runBlock(int block,int condition,array<int> order[20])
		begin			
			randomizeTiming();	
			resetDataBuffer();			
			
			#show instruction
			if condition == 1 then
				targetPicture.set_part(1,blockA[1]);
				showPicture.present();
				p_1_2.set_part(1,blockA[1]);
				play1And2.present();
				showPicture.present();
				targetPicture.set_part(1,blockA[2]);
				showPicture.present();
				p_3_4.set_part(1,blockA[2]);
				play3And4.present();		
				showPicture.present();		
			elseif condition == 2 then
				targetPicture.set_part(1,blockB[1]);
				showPicture.present();
				p_3_4.set_part(1,blockB[1]);
				play3And4.present();	
				showPicture.present();
				targetPicture.set_part(1,blockB[2]);
				showPicture.present();
				p_1_2.set_part(1,blockB[2]);			
				play1And2.present();
				showPicture.present();			
			end;			
			
			loop
				int i = 1
			until
				i > order.count()
			begin
				executeTrial(i,block,condition,order[i],fixArray[i],itiArray[i]);
				i = i + 1;
			end;			
			#store buffered data to storage
				# 1=stimulus,2=position,3=rt,4=answerGiven,5=answerCorrect,6=goTrial
				# rawData[blocksInTotal][stimuliPerBlock][6];				
				loop
					int i = 1
				until
					i > stimuliPerBlock
				begin
					loop
						int j = 1
					until
						j > 6
					begin
						#stimulus 1 data
						if i < 6 then
							rawData[block][i][j] = stim1[i][j];
						#stimulus 2 data
						elseif i > 5 && i < 11 then
							rawData[block][i][j] = stim2[i-5][j];
						#stimulus 3 data
						elseif i > 10 && i < 16 then
							rawData[block][i][j] = stim3[i-10][j];
						#stimulus 4 data
						elseif i > 15 then
							rawData[block][i][j] = stim4[i-15][j];
						end;						
						j = j + 1;
					end;					
					i = i + 1;
				end;
		end;
	#-- /RUN BLOCK  --#
	
	#--  RUN TASK  --#
		sub runTask
		begin
			#set block order
			if experimentGroup == 1 then
				blockConditions = {1,2,1,2};
			else
				blockConditions = {2,1,2,1};
			end;		
			
			#execute blocks
			begin
				loop
					int i = 1
				until
					i > blocksInTotal
				begin
					
					array<int> orderBuffer[20];
					
					if i == 1 then
						orderBuffer = block1Order;
					elseif i == 2 then
						orderBuffer = block2Order;
					elseif i == 3 then
						orderBuffer = block3Order;
					elseif i == 4 then
						orderBuffer = block4Order;
					end;						
					runBlock(i,blockConditions[i],orderBuffer);
					i = i + 1;
				end;
			end;
		end;
	#-- /RUN TASK  --#
	
	
	#--  SHOW PARTICIPANT PAGE  --#
		#first page where the experimenteer is supposed to insert the participant number
		sub showInputPage (int condition)	
		begin				
			#response_data feedback; 
			if condition == 1 then
				loop
					bool correctInput = false
				until
					correctInput == true
				begin
					inputPageText.set_caption("Bitte Versuchspersonencode eingeben:");
					inputPageText.redraw();
					vpCode = system_keyboard.get_input( exp_eingabe, input );
					if vpCode != "" then
						correctInput = true;
					else
						spacePageText.set_caption("ERROR!\n\nBitte geben Sie einen Code an!\nDrücken Sie Leertaste um fortzufahren.");
						spacePageText.redraw();
						spacePage.present();
					end;
				end;
			elseif condition == 2 then
				loop
					bool correctInput = false
				until
					correctInput == true
				begin
					inputPageText.set_caption("Bitte Gruppe eingeben (1 oder 2):");
					inputPageText.redraw();
					string group = system_keyboard.get_input( exp_eingabe, input );
					
					if group == "1" || group == "2" then
						experimentGroup = int(group);
						correctInput = true;
					else
						spacePageText.set_caption("ERROR!\n\nBitte eine zulässige Gruppe eingeben!\nDrücken Sie Leertaste um fortzufahren.");
						spacePageText.redraw();
						spacePage.present();
					end;
				end;
			end;		
		end;	
#-- /SHOW PARTICIPANT PAGE  --#
	
#-- /SUBROUTINES  --#

#--  EXECUTION  --#		
	#gather data
	showInputPage(1);
	showInputPage(2);
	#run instruction
	mode = "practice";
	#runInstruction();
	#run task
	mode = "execution";
	stimuliRandomization();
	runTask();
	#write data
	correctAndCalculateData();
	exportData();
	#debriefing
	debriefing.present();	
#-- /EXECUTION  --#